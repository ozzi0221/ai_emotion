version: '3.8'

services:
  # 회상치료 AI 아바타 메인 애플리케이션
  avatar-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: avatar-emotion-assistant
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=false
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - FLASK_SECRET_KEY=${FLASK_SECRET_KEY}
    volumes:
      # 데이터 영속성을 위한 볼륨 마운트
      - avatar_memory_data:/app/memory_data
      - avatar_logs:/app/logs
      - avatar_backups:/app/backups
      # 아바타 비디오 파일을 호스트에서 마운트 (선택적)
      - ./static/videos:/app/static/videos:ro
      - ./static/images:/app/static/images:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - avatar-network
    depends_on:
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.avatar.rule=Host(`avatar.localhost`)"
      - "traefik.http.services.avatar.loadbalancer.server.port=5000"

  # Redis (캐싱 및 세션 관리용)
  redis:
    image: redis:7-alpine
    container_name: avatar-redis
    ports:
      - "6379:6379"
    volumes:
      - avatar_redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-avatarpass}
    restart: unless-stopped
    networks:
      - avatar-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx (리버스 프록시 및 정적 파일 서빙)
  nginx:
    image: nginx:alpine
    container_name: avatar-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - avatar_logs:/var/log/nginx
    depends_on:
      - avatar-app
    restart: unless-stopped
    networks:
      - avatar-network

  # Monitoring (Prometheus - 선택적)
  prometheus:
    image: prom/prometheus:latest
    container_name: avatar-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - avatar_prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - avatar-network
    profiles:
      - monitoring

  # Grafana (대시보드 - 선택적)
  grafana:
    image: grafana/grafana:latest
    container_name: avatar-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - avatar_grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - avatar-network
    profiles:
      - monitoring

# 볼륨 정의
volumes:
  avatar_memory_data:
    driver: local
  avatar_logs:
    driver: local
  avatar_backups:
    driver: local
  avatar_redis_data:
    driver: local
  avatar_prometheus_data:
    driver: local
  avatar_grafana_data:
    driver: local

# 네트워크 정의
networks:
  avatar-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
