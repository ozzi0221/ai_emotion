[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["app", "utils", "config", "tests"]
known_third_party = ["flask", "google", "requests"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
default_section = "THIRDPARTY"
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --disable-warnings"
testpaths = [
    "tests",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "security: marks tests as security tests",
]

[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "venv/*",
    "env/*",
    "*/migrations/*",
    "*/venv/*",
    "*/virtualenvs/*",
    "*/site-packages/*",
    "setup.py",
    "manage.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", "env"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection in tests

[tool.flake8]
max-line-length = 100
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
]
exclude = [
    ".git",
    "__pycache__",
    "venv",
    "env",
    "build",
    "dist",
    ".tox",
    ".pytest_cache",
]
per-file-ignores = [
    "__init__.py:F401",  # imported but unused
    "tests/*:S101",      # use of assert
]

[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "avatar-emotion-assistant"
description = "회상치료 AI 아바타 - 감정비서"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Avatar Team", email = "team@avatar.local"},
]
keywords = ["ai", "avatar", "reminiscence", "therapy", "emotion", "assistant"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Healthcare Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
]
dependencies = [
    "Flask>=2.3.0",
    "google-generativeai>=0.3.0",
    "python-dotenv>=1.0.0",
    "requests>=2.31.0",
]
dynamic = ["version"]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "pre-commit>=3.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "coverage>=7.0.0",
    "requests-mock>=1.10.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=1.0.0",
]
production = [
    "gunicorn>=20.1.0",
    "redis>=4.5.0",
    "psutil>=5.9.0",
]

[project.urls]
Homepage = "https://github.com/your-org/avatar-emotion-assistant"
Documentation = "https://avatar-emotion-assistant.readthedocs.io/"
Repository = "https://github.com/your-org/avatar-emotion-assistant.git"
"Bug Tracker" = "https://github.com/your-org/avatar-emotion-assistant/issues"

[project.scripts]
avatar-server = "app:main"

[tool.setuptools_scm]
write_to = "_version.py"

[tool.setuptools.packages.find]
where = ["."]
include = ["app*", "utils*", "config*"]
exclude = ["tests*"]
